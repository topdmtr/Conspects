Команды. (Git Bash Here)

Git init – (можно через Git GUI Here) создает в нужной папке репозиторий «.git», в котором сохраняется история изменения файлов этой папки. 

Git add . – (есть в PyCharm – правой кнопкой по файлу/git/add) добавляет содержимое рабочего каталога в индекс (staging area) для последующего коммита. По умолчанию git commit использует лишь этот индекс. Точка «.» означает, что добавить надо все измененные файлы. Можно указать имена конкретных файлов через пробел. 
Git add -p test.html – это частичное добавление файла в индекс. Выдается запрос на параметр. Например, y – добавить целиком фрагмент кода, n – не добавлять фрагмент; s – разделить текущий фрагмент кода на более мелкие фрагменты кода. После этого будет выводиться по кусочкам код, после чего, выбирая y или n, будем добавлять или не добавлять текущий кусочек. После этого закоммитятся только выбранные кусочки кода. 
Кстати, если удалить файл командой “delete”, например, в проводнике, то сообщение об удаление сразу будет в индексе без использования add (т.е. готовым коммиту) 

Git commit -m “comment” – (есть в PyCharm – галочка справа сверху) создает коммит с говорящим комментарием. 

Git commit -a -m “comment” – одной командой добавляем все изменения в индекс и коммитим их. Так лучше не делать. 

Git status - показывает состояния файлов в рабочем каталоге и индексе: какие файлы изменены, но не добавлены в индекс; какие ожидают коммита в индексе. Вдобавок к этому выводятся подсказки о том, как изменить состояние файлов.

Git rm - если вы выполните эту команду, удаление файла попадёт в индекс. После следующего коммита файл исчезнет и больше не будет отслеживаться. Если вы изменили файл и уже проиндексировали его, вы должны использовать принудительное удаление с помощью параметра -f. Это сделано для повышения безопасности, чтобы предотвратить ошибочное удаление данных, которые ещё не были записаны в снимок состояния и которые нельзя восстановить из Git. 

Git rm --cached test.html – удалить файл из индекса, оставив его при этом в рабочем каталоге (при этом в файл .gitignore его нужно добавить, если и далее его не нужно индексировать). Другими словами, вы можете захотеть оставить файл на жёстком диске, но перестать отслеживать изменения в нём. Это особенно полезно, если вы забыли добавить что-то в файл .gitignore. 

.gitignore – специальный файл в репозитории. В не указываются конкретные файлы и целые папки, изменения в которых не нужно отслеживать. Такие файлы будут подсвечиваться белым цветом. 
Если добавить еще файл, например, test.html в .gitignore, то он будет по-прежнему отслеживаться. Нужно выполнить команду Git rm --cached test.html. И закоммитить все. 

Git mv – если вам хочется переименовать файл в Git, вы можете сделать что-то вроде: $ git mv file_from file_to

Git log – показывает все действия с этим репозиторием. Кнопкой q выход из просмотра. 

Git show – просмотр последнего коммита. Или можно просмотреть конкретный коммит по хэшу (длинный цифровой идентификатор коммита; его можно посмотреть через Git log). Предположим, что в нашем примере это коммит 1c002dd….. Если вы хотите выполнить для него git show, то следующие команды эквиваленты (предполагается, что сокращения однозначны):
$ git show 1c002dd4b536e7479fe34593e72e6c6c1819e53b
$ git show 1c002dd4b536e7479f
$ git show 1c002d

Git diff хэш1 хэш2 – сравнение двух коммитов. Красным будет показана удаленная строка, зеленым – добавленная. 
Git diff HEAD~1 – это последний коммит (будут показаны красным и зеленым удаленные и добавленные строки в последнем коммите). HEAD~2 – второй коммит с конца. 
Git diff HEAD~2 HEAD~1 – насколько я понял, покажутся изменения уже за два последних коммита (так ???). 
Git diff test.html – покажет, какие изменения были внесены в файл, но еще не добалены ни в индекс, ни в коммит. 
Git diff --name-only хэш – покажет только имена файлов, с которыми были произведены какие-то действия в этом коммите. 

Для отслеживания изменений в среде разработки IDE слева внизу есть кнопка GIT или version control. Мы увидим всю историю наших коммитов. Можно выбрать несколько и правой кнопкой выбрать “compare versions”. Далее нужно выбрать файл, в котором нужно посмотреть изменения. Также здесь можно посмотреть хэш любого коммита (он должен быть справа снизу).

$ git show HEAD~ - соответствует ссылке на первого родителя. HEAD~2 означает «первый родитель первого родителя» или «дедушка»?—?при этом происходит переход от заданного предка вглубь указанное число раз. 

Git checkout -- test.html – отменяет внесенные в файл не проиндексрованные изменения. Аналог ctrl+z

Git reset HEAD test.html – отменяет индексирование файла. Далее можно применить Git checkout -- test.html. 

Git commit --amend – позволяет внести изменения в последний коммит (предлагает еще и комментарий изменить, после чего сохранить и закрыть соответствующее окно). Надо: внести те изменения, которые нужно добавить в последний коммит (например, изменить код файла). Потом проиндексировать их (add). И потом вызвать команду Git commit --amend. Тогда эти изменения добавятся к последнему коммиту (т.е. не будет создаваться отдельный коммит). 

Git revert хэш – откат (отмена) выбранного коммита, т.е будут отменены изменения этого конкретного коммита и создан соответствующий (новый) коммит, накладывающий обратные изменения. Будет дано предложение комментария: Revert “здесь комментарий к отменяемому коммиту”. 

Git reset --hard хэш – сбрасывает историю коммитов после этого коммита. Срезает все последующую историю. С этим аккуратнее.  

Git reset --hard – удаляет все проиндексированные (т.е. добаленные в идекс) и непроиндексированные изменения. Т.е. оставляет только последний коммит. 

Git reset --soft хэш - берет все изменения после этого коммита и добавляет их в индекс. А дерево коммитов после выбранного коммита срезает. После этого, например, можно использовать команду:
Git reset --mixed HEAD test.html – он вернет изменения в unstaged, т.е. сделает их неиндексированными. Можно НЕ написать --mixed, этот параметр будет добавлен по умолчанию. 

Git reset хэш – параметр --mixed добавится по умолчанию и после этого коммита изменения всех коммитов добавятся в unstaged (т.е. будут неиндексрованы).  

Репозиторий на Github.com

Git clone https://github.com/адресс-репозитория - клонирует репозиторий на комп. Находиться надо в нужной папке. В этой паке будет создана еще одна папка с именем репозитория. И в этой папке можно создать проект, который будет отслеживаться. Все созданные файлы будут unstaged. Файлы с настройками среды разработки обычно убирают в .gitignore. Т.к. у всех свои настройки шрифта IDE и т.п. 

Git push – отправляет сделанные коммиты из локального репозитория в удаленный на github. Запрашивается логин и пароль на github. 

Фалы можно создавать прямо на github. И закоммитить можно там же. 

Git pull – забрать те новые изменения, коммиты в локальный репозиторий, которые появились в центральном репозитории на github. 

Ветки: создание и управление

Git checkout -b dev – создание новой ветки dev.

Git checkout main – переключение на существующую ветку main. В среде разработки после переключения будут показываться файлы после последнего коммита данной ветки. 

В среде разработки все коммиты можно посмотреть, нажав внизу слева Git и выбрав в меню Branch: параметр all. 

Git push -u origin dev – отправить в репозиторий (origin) ветку dev (u значит update). 

Git remote – показать все удаленные серверы. У нас пока только origin. 

Git remote -v – показать адреса удаленных серверов. У нас будет так:
origin  https://github.com/topdmtr/git-basics (fetch)
origin  https://github.com/topdmtr/git-basics (push)

Git branch -m dev develop – переименовать ветку dev в develop (m – это от слова modify).

Git branch -l – перечислить все ветки, которые есть в проекте. 

Git branch -d develop – удалить ветку develop из локального репозитория. 

Git push --delete origin dev – удалить ветку dev из удаленного репозитория origin. 

Git diff master..develop – сравнений веток master и develop. 
Для сравнения изменений в разных ветках в среде разработки IDE слева внизу есть кнопка GIT или version control. Выбираем коммиты разных веток и правой кнопкой выбрать “compare versions”. Далее нужно выбрать файл, в котором нужно посмотреть изменения. 

Git fetch – если нужно, не сливая с локальным репозиторием изменения (для слияния нужно pull), которые могли быть сделаны в удаленном репозитории, только получить информацию об изменениях. И после этого команда 
Git diff master..origin/master – произведет сравнение ветки на локальном и удаленном репозиториях. 

Слияние и разрешение конфликтов

Git merge dev – слияние веток. Запускается из той, в которую мы хотим влить ветку dev.
